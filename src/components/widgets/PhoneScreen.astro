---
import type { Content } from '~/types';
import Headline from '../ui/Headline.astro';
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import ItemGrid from '../ui/ItemGrid.astro';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  callToAction,
  items = [],
  columns,
  image = await Astro.slots.render('image'),
  isReversed = false,
  isAfterContent = false,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props as Content;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl mx-auto ${isAfterContent ? 'pt-0 md:pt-0 lg:pt-0' : ''} ${classes?.container ?? ''}`}
  bg={bg}
>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: 'max-w-xl sm:mx-auto lg:max-w-2xl',
      title: 'text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-4 font-heading',
      subtitle: 'max-w-3xl mx-auto sm:text-center text-xl text-muted dark:text-slate-400',
    }}
  />
  <div class="mx-auto max-w-7xl p-4 md:px-8">
    <div class={`md:flex ${isReversed ? 'md:flex-row-reverse' : ''} md:gap-16`}>
      <div class="md:basis-1/2 self-center">
        {content && <div class="mb-12 text-lg dark:text-slate-400" set:html={content} />}

        {
          callToAction && (
            <div class="mt-[-40px] mb-8 text-primary">
              <Button variant="link" {...callToAction} />
            </div>
          )
        }

        <ItemGrid
          items={items}
          columns={columns}
          defaultIcon="tabler:check"
          classes={{
            container: `gap-y-4 md:gap-y-8`,
            panel: 'max-w-none    reveal fade-right',
            title: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
            description: 'text-muted dark:text-slate-400 ml-2 rtl:ml-0 rtl:mr-2',
            icon: 'flex h-7 w-7 items-center justify-center rounded-full bg-green-600 dark:bg-green-700 text-gray-50 p-1',
            action: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
          }}
        />
      </div>
      <div aria-hidden="true" class="md:mt-0 relative -bottom-[63px] md:-bottom-[83px] lg:-bottom-[99px] 2xl:-bottom-[123px]">
        {
          image && (
            <div class="relative m-auto max-w-4xl">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <div class="phone relative m-auto w-[320px] h-[470px] md:w-[400px] md:h-[600px]">
                  <div class="screen">
                    <video
                      src="https://www.xlzy56.com/assets/shipin.7eaf7560.mp4"
                      muted
                      class="video"
                    />
                  </div>
                  <div class="phone-mask" />
                </div>
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>
</WidgetWrapper>

<style is:global>
.phone-mask {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background: url('https://staticweb.keepcdn.com/staticShow/images/newhome/phone-848d0effca.png') no-repeat
    center top /100%;
}

.screen {
  position: absolute;
  top: 18px;
  left: 21px;
  right: 21px;
  bottom: 4px;
  overflow: hidden;
  border-radius: 8px 8px 0 0;
}

.reveal {
  position: relative;
  opacity: 0;
}

.reveal.active {
  opacity: 1;
}

.active.fade-right {
  animation: fade-right 1s ease-in;
}

@keyframes fade-right {
  0% {
    transform: translateX(200px);
    opacity: 0;
  }
  100% {
    transform: translateX(0);
    opacity: 1;
  }
}
</style>

<script>
function reveal() {
  var reveals = document.querySelectorAll(".reveal");

  for (var i = 0; i < reveals.length; i++) {
    var windowHeight = window.innerHeight;
    var elementTop = reveals[i].getBoundingClientRect().top;
    var elementVisible = 150;

    if (elementTop < windowHeight - elementVisible) {
      reveals[i].classList.add("active");
      console.log('active')
    } else {
      reveals[i].classList.remove("active");
      console.log('deactive')
    }
  }
}

window.addEventListener("scroll", reveal);


  function playPauseVideo() {
    const videos = document.querySelectorAll('video');
    videos.forEach((video) => {
      // We can only control playback without insteraction if video is mute
      video.muted = true;
      // Play is a promise so we need to check we have it
      const playPromise = video.play();
      if (playPromise !== undefined) {
        playPromise.then(() => {
          const observer = new IntersectionObserver(
            (entries) => {
              entries.forEach((entry) => {
                if (entry.intersectionRatio == 0 && !video.paused) {
                  video.pause();
                } else {
                  video.play();
                }
              });
            },
            { threshold: 0 }
          );
          observer.observe(video);
        });
      }
    });
  }

  // And you would kick this off where appropriate with:
  playPauseVideo();
</script>
